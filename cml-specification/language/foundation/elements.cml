
// Model (Abstract Syntax)

concept SourceLocation
{
    line: Integer;
    column: Integer;
    sourcePath: String;
}

abstract concept ModelElement
{
    location: SourceLocation;
}

abstract concept NamedElement: ModelElement
{
    name: String;
    scope: Scope;
}

concept Scope
{
    parent: Scope?;
    owner: ModelElement;
    elements: NamedElement*;
}

association ScopeElements
{
    Scope.elements: NamedElement*;
    ModelElement.scope: Scope;
}

// Validator (Well-Formedness Rules)

command validateNamedElement(element: NamedElement)
{
    invoke validateNameConflicts(element);
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

command synthesizeModelElement(element: ~ModelElement, elementNode: Node)
{
    ensure
    {
        element.location = elementNode.location;
    }
}

command synthesizeNamedElement(element: ~NamedElement, elementNode: NamedElementNode, parentScope: Scope)
{
    invoke synthesizeModelElement(element, elementNode);

    ensure
    {
        element.name = elementNode.name;
        element.scope = parentScope;
    }
}

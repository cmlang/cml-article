
// Model (Abstract Syntax)

concept Property: TypedElement
{
    value: String;
}

concept PropertyList
{
    properties: list of Property*;
}

// Validator (Well-Formedness Rules)

command validateProperty(property: Property)
{
    invoke validateTypedElement(property);
}

command validatePropertyList(propertyList: PropertyList)
{
    for property in propertyList.properties
        invoke validateProperty(property);
}

// Concrete Syntax

concept PropertyNode: TypedElementNode
{
    string: String;

    property: Property?;
}

concept PropertyListNode: Node
{
    propertyNodes: list of PropertyNode*;
}

command ModelBuilder.includeProperty(location: SourceLocation, name: String, string: String)
{
    require buildingSite.currentPropertyListNode;
    require buildingSite.currentTypeNode;

    let currentTypeNode = buildingSite.currentTypeNode

    let propertyNode = new PropertyNode;

    ensure
    {
        propertyNode.location = location;

        propertyNode.name = name;
        proeprtyNode.string = string;

        propertyNode.typeNode = currentTypeNode;

        buildingSite.currentPropertyListNode.propertyNodes | includes propertyNode;

        not buildingSite.currentTypeNode;
    }
}

command ModelBuilder.createPropertyList(location: SourceLocation)
{
    let propertyListNode = new PropertyListNode;

    ensure
    {
        propertyListNode.location = location;

        buildingSite.currentPropertyListNode = propertyListNode;
    }
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

command synthesizeProperty(propertyNode: PropertyNode, parentScope: Scope)
{
    let property = new Property;
    invoke synthesizeTypedElement(property, propertyNode, parentScope);

    ensure
    {
        property.value = propertyNode.string;

        propertyNode.property = property;
    }
}

command synthesizePropertyList(propertyList: ~PropertyList, propertyListNode: PropertyListNode, parentScope: Scope)
{
    for propertyNode in propertyListNode.propertyNodes
        invoke synthesizeProperty(propertyNode, parentScope);

    ensure
    {
        propertyList.properties = propertyListNode.propertyNodes.property;
    }
}

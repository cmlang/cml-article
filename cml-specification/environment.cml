concept Scope
{
    parent: Scope?;
    owner: ModelElement;
    elements: NamedElement*;
}

interface Environment
{
    command createRootScope(owner: ModelElement): Scope;
    command createScope(owner: ModelElement, parent: Scope): Scope;

    command addElement(element: NamedElement, scope: Scope);

    query findElement(name: String, scope: Scope): NamedElement?;
    query findLocalConflicts(name: String, scope: Scope): NamedElement*;
}

collaborator environment: Environment;

contract of command Environment.createRootScope(owner: ModelElement): Scope
{
    let rootScope = new Scope;

    ensure
    {
        rootScope.owner = owner;
    }

    return rootScope;
}

contract of command Environment.createScope(owner: ModelElement, parent: Scope): Scope
{
    given owner is NamedElement
        invoke environment.addElement(owner, parentScope);

    let scope = new Scope;

    ensure
    {
        scope.owner = owner;
        scope.parent = parent;
    }

    return scope;
}

contract of command Environment.addElement(element: NamedElement, scope: Scope)
{
    ensure
    {
        scope.elements | includes element;
    }
}

contract of query Environment.findElement(name: String, scope: Scope): NamedElement?
{
    let element = for e in scope.elements | select first e.name = name;

    given not element and scope.parent
        return findElement(name, scope.parent);

    return element;
}

contract of query Environment.findLocalConflicts(name: String, scope: Scope): NamedElement*
{
    return for element in scope.elements | select element.name = name;
}

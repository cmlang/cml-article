
interface SyntaxTreeBuilder
{
    @BeforeRule("model")
    command createModelNode(location: SourceLocation);

    @BeforeRule("modelElement")
    command createModelElementNode(location: SourceLocation);

    @AfterRule("modelElement")
    command includeModelElementNode(location: SourceLocation);

    @AfterRule("concept")
    command includeConceptNode(location: SourceLocation, name: String);

    @AfterRule("target")
    command includeTargetNode(location: SourceLocation, name: String);

    @BeforeRule("propertyList")
    command createPropertyList(location: SourceLocation);

    @AfterRule("property")
    command includeProperty(location: SourceLocation, name: String, string: String);

    @AfterRule("type")
    command includeType(location: SourceLocation, name: String);
}

singleton syntaxTree: SyntaxTree;

concept SyntaxTree
{
    modelNode: ModelNode?;

    currentModelElementNode: ModelElementNode?;
    currentPropertyListNode: PropertyListNode?;
    currentTypeNode: TypeNode?;
}

annotation BeforeRule(ruleName: String)
{
    usages = ["command"];
}

annotation AfterRule(ruleName: String)
{
    usages = ["command"];
}

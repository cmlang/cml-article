
interface SyntaxTreeBuilder
{
    @BeforeRule("model")
    command createModelNode();

    @BeforeRule("modelElement");
    command createModelElementNode();

    @AfterRule("modelElement");
    command includeModelElementNode();

    @AfterRule("concept")
    command includeConceptNode(name: String);

    @AfterRule("target")
    command includeTargetNode(name: String);

    @BeforeRule("propertyList");
    command createPropertyList();

    @AfterRule("property")
    command includeProperty(name: String, string: String);
}

singleton syntaxTree: SyntaxTree;

concept SyntaxTree
{
    modelNode: ModelNode?;

    currentModelElementNode: ModelElementNode?;
    currentPropertyListNode: PropertyListNode?;
}

annotation BeforeRule(ruleName: String)
{
    usages = ["command"];
}

annotation AfterRule(ruleName: String)
{
    usages = ["command"];
}


concept Scope
{
    parent: Scope?;
    owner: ModelElement;
    elements: NamedElement*;
}

association ScopeElements
{
    Scope.elements: NamedElement*;
    ModelElement.scope: Scope;
}

command createRootScope(owner: ~ModelElement): Scope
{
    let rootScope = new Scope;

    ensure
    {
        rootScope.owner = owner;
    }

    return rootScope;
}

command createScope(owner: ~ModelElement, parent: Scope): Scope
{
    let scope = new Scope;

    ensure
    {
        scope.owner = owner;
        scope.parent = parent;
    }

    return scope;
}

query findElement(name: String, scope: Scope): NamedElement?
{
    require not name = /\s*/;

    let element = for e in scope.elements | select first e.name = name;

    given not element and scope.parent
        return findElement(name, scope.parent);

    return element;
}

query findLocalConflictsFor(element: NamedElement): NamedElement*
{
    return for e in scope.elements | select e.name = element.name and e != element;
}

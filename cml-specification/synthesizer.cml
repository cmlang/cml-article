// The ModelSynthesizer will synthesize the attributes of the syntax tree
// based on the node's terminals and the node's children.

// To generate the ModelSynthesizer interface and the contracts scaffolding,
// for each production rule containing attributes,
// define a command "synthesize" containing the node type of the production rule
// as an argument.

interface ModelSynthesizer
{
    command synthesizeModel(modelNode: ModelNode);
    command synthesizeConcept(conceptNode: ConceptNode, parentScope: Scope);
    command synthesizeTarget(targetNode: TargetNode, parentScope: Scope);
    command synthesizeProperty(propertyNode: PropertyNode, parentScope: Scope);
}

// The contracts need to be defined by the language designer.

contract of command ModelSynthesizer.synthesizeModel(modelNode: ModelNode)
{
    let model = new Model;
    let scope = environment.createRootScope(model);

    for modelNode.modelElementNodes
    {
        given conceptNode invoke synthesiseConcept(conceptNode, scope);
        given targetNode invoke synthesiseTarget(targetNode, scope);
    }

    ensure
    {
        model.scope = scope;
        model.location = modelNode.location;
        model.concepts = modelNode.modelElementNodes.conceptNode.concept;
        model.targets = modelNode.modelElementNodes.targetNode.target;

        modelNode.model = model;
    }
}

contract of command ModelSynthesizer.synthesizeConcept(conceptNode: ConceptNode, parentScope: Scope)
{
    let concept = new Concept;
    let scope = environment.createScope(concept, parentScope);

    ensure
    {
        concept.scope = scope;
        concept.location = conceptNode.location;
        concept.name = conceptNode.name;

        conceptNode.concept = concept;
    }
}

contract of command ModelSynthesizer.synthesizeTarget(targetNode: TargetNode, parentScope: Scope)
{
    let target = new Target;
    let scope = environment.createScope(target, parentScope);

    let propertyNodes = targetNode.propertyListNode.propertyNodes;
    for propertyNode in propertyNodes
        invoke synthesizeProperty(propertyNode, scope);

    ensure
    {
        target.scope = scope;
        target.location = targetNode.location;
        target.name = targetNode.name;
        target.properties = propertyNodes.property;

        targetNode.target = target;
    }
}

contract of command ModelSynthesizer.synthesizeProperty(propertyNode: PropertyNode, parentScope: Scope)
{
    let property = new Property;

    invoke environment.addElement(property, parentScope);

    ensure
    {
        property.scope = parentScope;
        property.location = property.location;
        property.name = propertyNode.name;
        property.value = propertyNode.string;

        propertyNode.property = property;
    }
}

// The ModelSynthesizer will synthesise the attributes of the syntax tree
// based on the node's terminals and the node's children.

// To generate the ModelSynthesizer interface and the contracts scaffolding,
// for each production rule containing attributes,
// define a command "synthesize" containing the node type of the production rule
// as an argument.

interface ModelSynthesizer
{
    command synthesizeModel(modelNode: ModelNode);
    command synthesizeConcept(conceptNode: ConceptNode);
    command synthesizeTarget(targetNode: TargetNode);
    command synthesizeProperty(propertyNode: PropertyNode);
}

// The contracts need to be defined by the language designer.

contract of command ModelSynthesizer.synthesizeModel(modelNode: ModelNode)
{
    for modelNode.modelElementNodes
    {
        given conceptNode invoke synthesiseConcept(conceptNode);
        given targetNode invoke synthesiseTarget(targetNode);
    }

    let model = new Model;

    ensure
    {
        model.concepts = modelNode.modelElementNodes.conceptNode.concept;
        model.targets = modelNode.modelElementNodes.targetNode.target;
    }
}

contract of command ModelSynthesizer.synthesizeConcept(conceptNode: ConceptNode)
{
    let concept = new Concept;

    ensure
    {
        concept.name = conceptNode.name;
        conceptNode.concept = concept;
    }
}

contract of command ModelSynthesizer.synthesizeTarget(targetNode: TargetNode)
{
    for propertyNode in targetNode.propertyListNode.propertyNodes
        invoke synthesise(propertyNode);

    let target = new Target;

    ensure
    {
        target.name = targetNode.name;
        target.properties = targetNode.propertyListNode.propertyNodes.property;
        targetNode.target = target;
    }
}

contract of command ModelSynthesizer.synthesizeProperty(propertyNode: PropertyNode)
{
    let property = new Property;

    ensure
    {
        property.name = propertyNode.name;
        property.value = propertyNode.string;
        propertyNode.property = property;
    }
}

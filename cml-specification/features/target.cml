
// Model (Abstract Syntax)

concept Target: NamedElement
{
    properties: Property*;
}

// Validator (Well-Formedness Rules)

collaborator targetValidator: TargetValidator;

interface TargetValidator
{
    command validateTarget(target: Target)
    {
        invoke nameConflictValidator.validateNameConflicts(target);

        for property in properties
            invoke propertyValidator.validateProperty(property);
    }
}

// Concrete Syntax

concept TargetNode: Node
{
    name: String;
    propertyListNode: PropertyListNode;

    target: Target;
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

collaborator targetSynthesizer: TargetSynthesizer;

interface TargetSynthesizer
{
    command synthesizeTarget(targetNode: TargetNode, parentScope: Scope)
    {
        let target = new Target;
        let scope = environment.createScope(target, parentScope);

        let propertyNodes = targetNode.propertyListNode.propertyNodes;
        for propertyNode in propertyNodes
            invoke synthesizeProperty(propertyNode, scope);

        ensure
        {
            target.scope = parentScope;

            target.location = targetNode.location;
            target.name = targetNode.name;

            target.properties = propertyNodes.property;

            targetNode.target = target;
        }
    }
}

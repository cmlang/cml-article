
// Model (Abstract Syntax)

concept Target: NamedElement, PropertyList;

// Validator (Well-Formedness Rules)

command validateTarget(target: Target)
{
    invoke validateNamedElement(target);

    invoke validatePropertyList(target.properties);
}

// Concrete Syntax

concept TargetNode: NamedElementNode
{
    propertyListNode: PropertyListNode;

    target: Target?;
}

command SyntaxTreeBuilder.includeTargetNode(location: SourceLocation, name: String)
{
    require
    {
        syntaxTree.currentModelElementNode;
        syntaxTree.currentPropertyListNode;
    }

    let targetNode = new TargetMode;

    ensure
    {
        targetNode.location = location;

        targetNode.name = name;
        targetNode.propertyListNode = syntaxTree.currentPropertyListNode;

        syntaxTree.currentModelElementNode.targetNode = targetNode;
    }
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

command synthesizeTarget(targetNode: TargetNode, parentScope: Scope)
{
    let target = new Target;
    invoke synthesizeNamedElement(target, targetNode, parentScope);

    let scope = createScope(target, parentScope);
    invoke synthesizePropertyList(target.properties, targetNode.propertyListNode, scope);

    ensure
    {
        for target.properties
        {
            typeRequired = false;
            typeAllowed = false;
        }

        targetNode.target = target;
    }
}

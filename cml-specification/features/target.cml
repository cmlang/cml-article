
// Model (Abstract Syntax)

concept Target: NamedElement, PropertyList;

// Validator (Well-Formedness Rules)

collaborator targetValidator: TargetValidator;

interface TargetValidator
{
    command validateTarget(target: Target)
    {
        invoke nameConflictValidator.validateNameConflicts(target);

        invoke propertyListValidator.validatePropertyList(target.properties);
    }
}

// Concrete Syntax

concept TargetNode: Node
{
    name: String;
    propertyListNode: PropertyListNode;

    target: Target;
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

collaborator targetSynthesizer: TargetSynthesizer;

interface TargetSynthesizer
{
    command synthesizeTarget(targetNode: TargetNode, parentScope: Scope)
    {
        let target = new Target;
        let scope = environment.createScope(target, parentScope);

        invoke propertyListSynthesizer.synthesizePropertyList(target, targetNode, scope);

        ensure
        {
            target.scope = parentScope;

            target.location = targetNode.location;
            target.name = targetNode.name;

            targetNode.target = target;
        }
    }
}

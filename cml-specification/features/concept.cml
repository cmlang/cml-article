
// Model (Abstract Syntax)

concept Concept: NamedElement;

// Validator (Well-Formedness Rules)

interface ConceptValidator
{
    command validateConcept(concept: Concept)
    {
        let conflicts = environment.findLocalConflictsFor(concept);

        given conflits invoke errorReporter.reportNameConflict(concept, conflicts);
    }
}

collaborator conceptValidator: ConceptValidator;

// Concrete Syntax

concept ConceptNode: Node
{
    name: String;

    concept: Concept;
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

interface ConceptSynthesizer
{
    command synthesizeConcept(conceptNode: ConceptNode, parentScope: Scope)
    {
        let concept = new Concept;
        let scope = environment.createScope(concept, parentScope);

        ensure
        {
            concept.scope = parentScope;

            concept.location = conceptNode.location;
            concept.name = conceptNode.name;

            conceptNode.concept = concept;
        }
    }
}


// Model (Abstract Syntax)

concept Concept: NamedElement, PropertyList;

// Validator (Well-Formedness Rules)

command validateConcept(concept: Concept)
{
    invoke validateNamedElement(concept);

    invoke validatePropertyList(concept.properties);
}

// Concrete Syntax

concept ConceptNode: NamedElementNode
{
    propertyListNode: PropertyListNode?;

    concept: Concept?;
}

command SyntaxTreeBuilder.includeConceptNode(name: String)
{
    require syntaxTree.currentModelElementNode;

    let conceptNode = new ConceptMode;

    ensure
    {
        conceptNode.name = name;
        conceptNode.propertyListNode = syntaxTree.currentPropertyListNode;

        syntaxTree.currentModelElementNode.conceptNode = conceptNode;
    }
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

collaborator conceptSynthesizer: ConceptSynthesizer;

command synthesizeConcept(conceptNode: ConceptNode, parentScope: Scope)
{
    let concept = new Concept;
    invoke synthesizeNamedElement(concept, conceptNode, parentScope);

    given conceptNode.propertyListNode
    {
        let scope = createScope(concept, parentScope);
        invoke synthesizePropertyList(concept.properties, conceptNode.propertyListNode, scope);
    }

    ensure
    {
        for concept.properties
        {
            typeRequired = false;
            typeAllowed = true;
        }

        conceptNode.concept = concept;
    }
}

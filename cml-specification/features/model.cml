
// Model (Abstract Syntax)

concept Model: NamedElement
{
    concepts: Concept*;
    targets: Target*;
}

// Validator (Well-Formedness Rules)

collaborator modelValidator: ModelValidator;

interface ModelValidator
{
    command validateModel(model: Model)
    {
        for concept in model.concepts
            invoke conceptValidator.validateConcept(concept);

        for target in model.targets
            invoke targetValidator.validateTarget(target);
    }
}

// Concrete Syntax

concept ModelNode: Node
{
    modelElementNodes: ModelElementNode*;

    model: Model;
}

concept ModelElementNode: Node
{
    conceptNode: ConceptNode?;
    targetNode: TargetNode?;
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

collaborator modelSynthesizer: ModelSynthesizer;

interface ModelSynthesizer
{
    command synthesizeModel(modelNode: ModelNode)
    {
        let model = new Model;
        modelElementSynthesizer.synthesizeElement(model, modelNode);

        let scope = environment.createRootScope(model);
        for modelNode.modelElementNodes
        {
            given conceptNode invoke conceptSyntheizer.synthesiseConcept(conceptNode, scope);
            given targetNode invoke targetSynthesizer.synthesiseTarget(targetNode, scope);
        }

        ensure
        {
            model.concepts = modelNode.modelElementNodes.conceptNode.concept;
            model.targets = modelNode.modelElementNodes.targetNode.target;

            modelNode.model = model;
        }
    }
}

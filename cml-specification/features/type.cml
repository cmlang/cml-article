
// Model (Abstract Syntax)

concept Type: NamedElement;

// Validator (Well-Formedness Rules)

command validateType(type: Type)
{
    invoke validatePrimitiveType(type);
}

// Concrete Syntax

concept TypeNode: Node
{
    name: String;

    type: Type?;
}

command SyntaxTreeBuilder.includeType(location: SourceLocation, name: String)
{
    let typeNode = new TypeNode;

    ensure
    {
        typeNode.location = location;

        typeNode.name = name;

        syntaxTree.currentTypeNode = typeNode;
    }
}

// Model Synthesis (Synthesized Attributes / Inherited Scopes)

command synthesizeType(typeNode: TypeNode, parentScope: Scope)
{
    let type = new Type;
    invoke synthesizeNamedElement(type, typeNode, parentScope);

    ensure
    {
        typeNode.type = type;
    }
}

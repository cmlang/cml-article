// The concrete syntax tree defined below can represent a parsed CML program.
// It will be transformed intro a CML model (the abstract syntax tree) by the ModelSynthesizer.

// To transform the grammar into this syntax tree, for each production rule:
// - define a concept with the same name appending the suffix "Node".
// - for each non-terminal element in the production rule,
//   define an association role with the same name in the production rule's concept,
//   appending "Node",
//   and its type corresponding to the concept of the referenced production rule.
// - for each terminal element in the production rule,
// - define an attribute with the same name with the String type.
// - for any element participating in an alternative,
// - define its association role or attribute as optional.
// - for production rules containing a returns clause,
//   the corresponding attributes or association roles will be added to the node concept.

concept ModelNode
{
    modelElementNodes: ModelElementNode*;

    model: Model;
    scope: Scope;
}

concept ModelElementNode
{
    conceptNode: ConceptNode?;
    targetNode: TargetNode?;
}

concept ConceptNode
{
    name: String;

    concept: Concept;
    scope: Scope;
}

concept TargetNode
{
    name: String;
    propertyListNode: PropertyListNode;

    target: Target;
    scope: Scope;
}

concept PropertyListNode
{
    propertyNodes: PropertyNode*;
}

concept PropertyNode
{
    name: String;
    string: String;

    property: Property;
    scope: Scope;
}


import "/lang/common.stg"
import "/patterns/getter.stg"

// Modifiers

modifier(m) ::= ""

// Strings

type_string() ::= "str"

to_string_name() ::= "__str__"

to_string_expr(concept) ::= <<
"%s(<\\>
<if(concept.allProperties)><\\>
<concept.allProperties:{p|<getter_call(p)>=%s}; separator=", ">)" % (
    type(self).__name__,
    <to_string_fields(concept.allProperties, ",\n")>
)<\\>
<else><\\>
)" % type(self).__name__<\\>
<endif>
>>

to_string_field(property) ::= <<
self.<getter_call(property)>
>>

// Operations

class_operation(name, params, resultType, block) ::= <<
def <operation_header(name, params, resultType)>:
    <block>
>>

interface_operation(name, params, resultType) ::= <<
def <operation_header(name, params, resultType)>:
    pass
>>

operation_header(name, params, resultType) ::= <<
<name>(self<commaIf(params)><params:param_decl(); separator=", ">) -> <resultType>
>>

param_decl(param) ::= <<
<field_name(param)>: <fieldTypeDecl(param)>
>>

return(expression) ::= <<
return <expression>
>>

// Fields

field_name(namedElement) ::= <<
self.__<namedElement.name; format="underscore-case">
>>

field_type_optional(type) ::= <<
<type_name(type)>
>>

field_type_set(type) ::= <<
Set[<type_name(type)>]
>>

// Getters

getter_name(property) ::= <<
<property.name; format="underscore-case">
>>

getter_annotations(property) ::= <<
@property<\n>
>>

getter_type_required(type) ::= <<
<type_name(type)>
>>

getter_type_optional(type) ::= <<
<type_name(type)>
>>

getter_type_set(type) ::= <<
Set[<type_name(type)>]
>>

getter_field_value_required(property) ::= <<
<field_name(property)>
>>

getter_field_value_optional(property) ::= <<
<field_name(property)>
>>

getter_field_value_set(property) ::= <<
<field_name(property)>
>>

getter_call(property) ::= <<
<property.name; format="underscore-case">
>>




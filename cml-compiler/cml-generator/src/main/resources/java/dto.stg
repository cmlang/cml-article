dto(target, concept) ::= <<
package <target.packageName>;

import java.util.*;

<class(concept)>
>>

class(concept) ::= <<
public class <typeName(concept)>
{
    <concept.properties:field();separator="\n">

    <constructor(concept)>

    <concept.properties:getter();separator="\n\n">

    <toString(concept)>
}
>>

field(property) ::= <<
private final <typeDecl(property.type)> <fieldName(property)>;
>>

constructor(concept) ::= <<
public <typeName(concept)>(<concept.properties:constructorArgs();separator=", ">)
{
    <concept.properties:fieldInit();separator="\n">
}
>>

constructorArgs(property) ::= <<
<typeDecl(property.type)> <fieldName(property)>
>>

fieldInit(property) ::= <<
this.<fieldName(property)> = <fieldName(property)>;
>>

getter(property) ::= <<
public <typeDecl(property.type)> get<property.name; format="pascal-case">()
{
    return <fieldName(property)>;
}
>>

toString(concept) ::= <<
public String toString()
{
    return new StringBuilder(<typeName(concept)>.class.getSimpleName())
        .append('(')
        <concept.properties:toString_field();separator=".append(\", \")\n">
        .append(')')
        .toString();
}
>>

toString_field(property) ::= <<
.append("<fieldName(property)>=\\"").append(<fieldName(property)>).append('"')
>>

fieldName(property) ::= <<
<property.name; format="camel-case">
>>

typeName(type) ::= <<
<type.name; format="pascal-case">
>>

typeDecl(type) ::= <<
<({<type.kind>TypeDecl})(type)>
>>

requiredTypeDecl(type) ::= <<
<type.name; format="pascal-case">
>>

optionalTypeDecl(type) ::= <<
Optional\<<type.name; format="pascal-case">\>
>>

setTypeDecl(type) ::= <<
Set\<<type.name; format="pascal-case">\>
>>

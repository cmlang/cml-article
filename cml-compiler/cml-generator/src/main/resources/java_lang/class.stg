import "/generic/generic.stg"
import "/java_lang/common.stg"

class(concept) ::= <<
<class7(
    concept=concept,
    classNameSuffix="",
    ancestors=concept.directAncestors,
    interfaces=[],
    fieldAncestors=[],
    delegatedProperties=[],
    superProperties=concept.inheritedProperties
)>
>>

class2(concept, classNameSuffix) ::= <<
<class7(
    concept=concept,
    classNameSuffix=classNameSuffix,
    ancestors=[],
    interfaces=[concept],
    fieldAncestors=concept.allAncestors,
    delegatedProperties=concept.inheritedProperties,
    superProperties=[]
)>
>>

class7(
    concept, classNameSuffix,
    ancestors, interfaces,
    fieldAncestors, 
    delegatedProperties, superProperties
) ::= <<
<abstract(concept, superProperties)>class <typeName(concept)><classNameSuffix><ancestorList(ancestors)><interfaceList(interfaces)>
{
    <ancestorFields(fieldAncestors)>
    <propertyFields(fieldAncestors, concept.properties)>
    <constructorForClients(concept, classNameSuffix, superProperties)>
    <primaryConstructor(concept, classNameSuffix, superProperties, fieldAncestors)>
    <fieldGetters(concept)>
    <delegatedGetters(concept, delegatedProperties)>
    <class_toString(concept)>
}
>>

abstract(concept, superProperties) ::= <<
<if(concept.abstract && superProperties)>abstract <endif>
>>

ancestorFieldDecl(concept) ::= <<
private final <typeName(concept)> <fieldName(concept)>;
>>

propertyFieldDecl(property) ::= <<
private final <fieldTypeDecl(property.type)> <fieldName(property)>;
>>

ancestorList(ancestors) ::= <<
<if(ancestors)> extends <ancestors:typeName();separator=", "><endif>
>>

interfaceList(interfaces) ::= <<
<if(interfaces)> implements <interfaces:typeName();separator=", "><endif>
>>

ancestorFields(fieldAncestors) ::= <<
<fieldAncestors:ancestorFieldDecl();separator="\n">
>>

propertyFields(fieldAncestors, fieldProperties) ::= <<
<newLineIf2(fieldAncestors, fieldProperties)><\\>
<fieldProperties:propertyFieldDecl();separator="\n">
>>

fieldGetters(concept) ::= <<
<concept.properties:getterImpl();separator="\n\n">
>>

delegatedGetters(concept, delegatedProperties) ::= <<
<newLineIf2(concept.properties, delegatedProperties)><\\>
<delegatedProperties:delegateGetter();separator="\n\n">
>>

constructorForClients(concept, classNameSuffix, superProperties) ::= <<
<if(!concept.abstract && concept.allAncestors && !superProperties)>
<newLineIfEither(concept.allAncestors, concept.properties)><\\>
public <typeName(concept)><classNameSuffix>(<constructorParamList([], [concept.allProperties])>)
{
    <constructorArgsForClients(concept)>
}<\\>
<endif>
>>

constructorArgsForClients(concept) ::= <<
<concept.allAncestors:createInvocation();separator="\n"><\\>
<emptyLineIf2(concept.allAncestors, concept.properties)><\\>
<concept.properties:fieldInit();separator="\n">
>>

primaryConstructor(concept, classNameSuffix, superProperties, paramAncestors) ::= <<
<if(paramAncestors || concept.properties)>
<newLineIfEither(paramAncestors, concept.properties)><\\>
public <typeName(concept)><classNameSuffix>(<constructorParamList(paramAncestors, [superProperties, concept.properties])>)
{
    <superConstructor(superProperties)>
    <if(superProperties)>
    <[concept.properties]:fieldInit();separator="\n">
    <else>
    <[paramAncestors, concept.properties]:fieldInit();separator="\n">
    <endif>
}
<endif>
>>

constructorParamList(paramAncestors, paramProperties) ::= <<
<paramAncestors:constructorAncestorParam();separator=", "><\\>
<commaIf2(paramAncestors, paramProperties)><\\>
<paramProperties:constructorPropertyParam();separator=", ">
>>

constructorAncestorParam(concept) ::= <<
<typeName(concept)> <fieldName(concept)>
>>

constructorPropertyParam(property) ::= <<
<fieldTypeDecl(property.type)> <fieldName(property)>
>>

fieldInit(namedElement) ::= <<
this.<fieldName(namedElement)> = <fieldName(namedElement)>;
>>

createInvocation(concept) ::= <<
<fieldName(concept)> = <\\>
<typeName(concept)>.create(<\\>
<concept.allAncestors:fieldName();separator=", "><\\>
<commaIf2(concept.allAncestors, concept.properties)><\\>
<concept.properties:fieldName();separator=", "><\\>
);
>>

superConstructor(inheritedProperties) ::= <<
<if(inheritedProperties)>super(<inheritedProperties:superArgs();separator=", ">);<endif>
>>

superArgs(property) ::= <<
<fieldName(property)>
>>

delegateGetter(property) ::= <<
public <getterHeader(property)>
{
    return <fieldName(property.parentScope)>.get<typeName(property)>();
}
>>

class_toString(concept) ::= <<
<newLineIf(concept.allProperties)><\\>
<toString(concept)>
>>


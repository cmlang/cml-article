
getterDecl(property) ::= <<
<getterHeader(property)>;
>>

getterImpl(property) ::= <<
public <getterHeader(property)>
{
    return <getterImpl_fieldValue(property)>;
}
>>

getterImpl_fieldValue(property) ::= <<
<({getterImpl_fieldValue_<property.type.kind>})(property)>
>>

getterImpl_fieldValue_required(property) ::= <<
<fieldName(property)>
>>

getterImpl_fieldValue_optional(property) ::= <<
Optional.ofNullable(<fieldName(property)>)
>>

getterImpl_fieldValue_set(property) ::= <<
Collections.unmodifiableSet(<fieldName(property)>)
>>

getterHeader(property) ::= <<
<getterTypeDecl(property.type)> get<property.name; format="pascal-case">()
>>

toString(concept) ::= <<
public <operationDecl(name="toString", params=[], resultType="String", block={<toString_code(concept)>})>
>>

toString_code(concept) ::= <<
return new StringBuilder(<typeName(concept)>.class.getSimpleName())
    .append('(')
    <concept.allProperties:toString_field();separator=".append(\", \")\n">
    .append(')')
    .toString();
>>

toString_field(property) ::= <<
.append("<fieldName(property)>=")<toString_fieldValue(property)>
>>

toString_fieldValue(property) ::= <<
<({toString_fieldValue_<property.type.kind>})(property)>
>>

toString_fieldValue_required(property) ::= <<
.append(String.format("\"%s\"", <getterCall(property)>))
>>

toString_fieldValue_optional(property) ::= <<
.append(<getterCall(property)>.isPresent() ? String.format("\"%s\"", <getterCall(property)>) : "not present")
>>

toString_fieldValue_set(property) ::= <<
.append(<getterCall(property)>)
>>

getterCall(namedElement) ::= <<
get<namedElement.name; format="pascal-case">()
>>

fieldName(namedElement) ::= <<
<namedElement.name; format="camel-case">
>>

typeName(namedElement) ::= <<
<namedElement.name; format="pascal-case">
>>

getterTypeDecl(type) ::= <<
<({getterTypeDecl_<type.kind>})(type)>
>>

getterTypeDecl_required(type) ::= <<
<typeName(type)>
>>

getterTypeDecl_optional(type) ::= <<
Optional\<<typeName(type)>\>
>>

getterTypeDecl_set(type) ::= <<
Set\<<typeName(type)>\>
>>

fieldTypeDecl(type) ::= <<
<({fieldTypeDecl_<type.kind>})(type)>
>>

fieldTypeDecl_required(type) ::= <<
<typeName(type)>
>>

fieldTypeDecl_optional(type) ::= <<
@Nullable <typeName(type)>
>>

fieldTypeDecl_set(type) ::= <<
Set\<<typeName(type)>\>
>>
